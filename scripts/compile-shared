#!/bin/bash

set -x
set -e

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
cd "$DIR"

PROJECT_DIR="$DIR/.."

cd ..

rm -rf ./library/classes && mkdir -p ./library/classes
rm -rf ./generated_classes && mkdir generated_classes

# clojure -X com.phronemophobic.objc/compile-bindings
PATH=$GRAALVM_HOME/bin:$PATH clojure -X com.phronemophobic.mobiletest/compile-interface-class
PATH=$GRAALVM_HOME/bin:$PATH clojure -X:depstar

# INITIALIZE_AT_BUILD_TIME=`clojure -X com.phronemophobic.mobiletest/initialize-at-build-time-list`
INITIALIZE_AT_BUILD_TIME='clojure,tech.v3.datatype,sci.impl,babashka.nrepl,tech.v3.resource,bencode,flatland.ordered,com.phronemophobic,com.phronemophobic.mobiletest,babashka.nrepl.impl,datascript,edamame.impl,tech.v3,tech.v3.parallel,sci.addons,tech.v3.datatype.ffi,sci,primitive_math,primitive_math$unuse_primitive_operators,primitive_math$using_primitive_operators_QMARK_,primitive_math$use_primitive_operators,primitive_math$variadic_predicate_proxy,primitive_math$variadic_proxy,primitive_math$unuse_primitive_operators,primitive_math$using_primitive_operators_QMARK_,primitive_math$use_primitive_operators,primitive_math$variadic_predicate_proxy,primitive_math$variadic_proxy'


pushd library

rm -rf ./tmp

# basic options https://www.graalvm.org/reference-manual/native-image/Options/#options-to-native-image-builder
# -H: hosted options: configure a native image build, i.e., influence what is put into the image and how the image is built

$GRAALVM_HOME/bin/native-image \
  --report-unsupported-elements-at-runtime `# membrane-only` \
  --initialize-at-build-time="$INITIALIZE_AT_BUILD_TIME" \
  --no-fallback `# membrane-only` \
  --no-server \
  -H:CompilerBackend=lir \
  -H:+ExitAfterRelocatableImageWrite \
  -H:+SharedLibrary \
  -H:+AddAllCharsets \
  -H:+ReportExceptionStackTraces \
  -H:-DeadlockWatchdogExitOnTimeout \
  -H:DeadlockWatchdogInterval=0 \
  -H:+RemoveSaturatedTypeFlows \
  -H:-SpawnIsolates \
  -Djdk.internal.lambda.eagerlyInitialize=false \
  -H:TempDirectory="$PROJECT_DIR"/library/tmp \
  -H:ReflectionConfigurationFiles="${PROJECT_DIR}"/conf/reflectionconfig-aarch64-android.json \
  -H:JNIConfigurationFiles="${PROJECT_DIR}"/conf/jniconfig-aarch64-android.json \
  -H:ResourceConfigurationFiles="${PROJECT_DIR}"/conf/resourceconfig-aarch64-android.json \
  -Dsvm.targetArch=aarch64 \
  '-Dsvm.platform=org.graalvm.nativeimage.Platform$LINUX_AARCH64' \
  -H:PageSize=16384 `# membrane-only` \
  -J-Dclojure.spec.skip-macros=true `# membrane-only` \
  -J-Xmx20G `# membrane-only` \
  -J-XX:MaxDirectMemorySize=8G `# membrane-only` \
  -J-Dclojure.compiler.direct-linking=true `# membrane-only` \
  -J-Dtech.v3.datatype.graal-native=true `# membrane-only` \
  -H:CAPCacheDir="${PROJECT_DIR}"/conf/capcache \
  --libc=bionic \
  -H:+UseCAPCache \
  -jar ../target/mobiletest-uber.jar

# $GRAALVM_HOME/bin/native-image \
#     --report-unsupported-elements-at-runtime \
#     --no-fallback \
#     -H:PageSize=16384 \
#     -J-Dclojure.spec.skip-macros=true \
#     -J-Xmx20G \
#     -J-XX:MaxDirectMemorySize=8G \
#     -J-Dclojure.compiler.direct-linking=true \
#     -J-Dtech.v3.datatype.graal-native=true \
#     -Dsvm.targetName=iOS \
#     -Dsvm.targetArch=arm64 \
#     '-Dsvm.platform=org.graalvm.nativeimage.Platform$IOS_AARCH64' \
#     -jar ../target/mobiletest-uber.jar

# native-image
#   --features=org.graalvm.home.HomeFinderFeature
#   -H:EnableURLProtocols=http,https
#   -H:+ForceNoROSectionRelocations
#   --libc=bionic
#   -H:IncludeResourceBundles=com/sun/javafx/scene/control/skin/resources/controls,com/sun/javafx/scene/control/skin/resources/controls-nt,com.sun.javafx.tk.quantum.QuantumMessagesBundle
#   -Dsvm.platform=org.graalvm.nativeimage.Platform$LINUX_AARCH64

find ./tmp -name 'llvm.o' -exec cp {} build/out \;
find ./tmp -name 'mobiletest-uber.o' -exec cp {} build/out \;

popd
